# -*- coding: utf-8 -*-
"""Finance Data Analysis Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10_XJbE2gVC7weumEx5Dgb7m_4ffQ3SQ2
"""

# Commented out IPython magic to ensure Python compatibility.
# Import data and World Bank modules from pandas_datareader
from pandas_datareader import data, wb
import pandas as pd
import numpy as np
import datetime
# Import yfinance for retrieving financial data from Yahoo Finance
import yfinance as yf
# %matplotlib inline

# start date for data retrieval
start = datetime.datetime(2006,1,1)
# end date for data retrieval
end = datetime.datetime(2016,1,1)

# Download historical stock data for each bank between 2006 and 2016
#Bank of America
BAC = yf.download('BAC', start=start, end=end)
#CitiGroup
C = yf.download('C', start=start, end=end)
# Goldman Sachs
GS = yf.download('GS', start=start, end=end)
# JPMorgan Chase
JPM = yf.download('JPM', start=start, end=end)
# Morgan Stanley
MS = yf.download('MS', start=start, end=end)
# Wells Fargo
WFC = yf.download('WFC', start=start, end=end)

# checks BAC finance data between 2006 to 2016
BAC

# Created a list of ticker symbols for the six major banks
tickers = ['BAC', 'C', 'GS', 'JPM', 'MS', 'WFC']

# Combined all bank stock DataFrames into a single DataFrame
bank_stocks = pd.concat([BAC,C,GS,JPM,MS,WFC],axis=1,keys=tickers)

# Rename all levels of the column MultiIndex to 'Bank Ticker'
# - bank_stocks.columns.nlevels gives the number of levels in the MultiIndex
# - This sets all levels to have the same name for consistency
bank_stocks.columns.names = ['Bank Ticker'] * bank_stocks.columns.nlevels

# check head of the Multiindex Dataframe
bank_stocks.head()

for tick in tickers:
  # Print the ticker symbol and the maximum closing price of BAC (Bank of America) stock
  print(tick,bank_stocks['BAC']['Close'].max())

# Created an empty DataFrame to store stock returns
returns = pd.DataFrame()

for tick in tickers:
    # Calculate the daily percentage change in the closing price for each stock
    # and store it in the 'returns' DataFrame with a column name formatted as 'TICKER Return'
    returns[tick+' Return'] = bank_stocks[tick]['Close'].pct_change()
returns.head()

import seaborn as sns
# Created a pairplot to visualize relationships between stock returns
sns.pairplot(returns[1:])

# Worst Drop (4 of them on Inauguration day)
returns.idxmin()

# Best Single Day Gain
returns.idxmax()

# Citigroup riskiest
# Compute the standard deviation of stock returns for each ticker
returns.std()

# Calculate the standard deviation of stock returns for each ticker
# within the date range
returns.loc['2015-01-01':'2015-12-31'].std()

# Create a distribution plot (histogram) for Morgan Stanley (MS) stock returns in 2015
sns.displot(returns.loc['2015-01-01':'2015-12-31']['MS Return'],color='green',bins=100)

# Create a distribution plot (histogram) for Citigroup (C) stock returns in 2008
sns.displot(returns.loc['2008-01-01':'2008-12-31']['C Return'],color='red',bins=100)

import plotly as plt
import cufflinks as cf
cf.go_offline()

for tick in tickers:
    # Plot the closing price of each stock over time
    bank_stocks[tick]['Close'].plot(figsize=(12,4),label=tick)